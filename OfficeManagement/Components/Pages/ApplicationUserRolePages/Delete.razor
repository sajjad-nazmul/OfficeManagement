@page "/roles/delete"
@using Microsoft.EntityFrameworkCore
@using OfficeManagement.Data
@using OfficeManagement.Services

@inject IRoleService roleService
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ApplicationUserRole</h2>
    <hr />
    @if (applicationuserrole is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Preference</dt>
            <dd class="col-sm-10">@applicationuserrole.Preference</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@applicationuserrole.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">NormalizedName</dt>
            <dd class="col-sm-10">@applicationuserrole.NormalizedName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ConcurrencyStamp</dt>
            <dd class="col-sm-10">@applicationuserrole.ConcurrencyStamp</dd>
        </dl>
        <EditForm method="post" Model="applicationuserrole" OnValidSubmit="DeleteApplicationUserRole" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(applicationuserrole is null)">Delete</button> |
            <a href="/roles">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ApplicationUserRole? applicationuserrole;

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        applicationuserrole = await roleService.GetRole(Id);

        if (applicationuserrole is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteApplicationUserRole()
    {
        await roleService.DeleteRole(applicationuserrole!);
        NavigationManager.NavigateTo("/roles");
    }
}
