 @* @rendermode InteractiveServer *@

@page "/employees"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfficeManagement.Data
@using OfficeManagement.Services

@using Microsoft.Extensions.Localization
@using OfficeManagement.Locales;

@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IStringLocalizer<Resource> localizer
@inject IEmployeeService employeeService

@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize(Roles = "Admin, Moderator")]

<PageTitle>@localizer["Employees"]</PageTitle>

<h1>@localizer["Employees"]</h1>

@* <p>
    <a href="employees/create">Create New</a>
</p> *@

<div class="mb-3">
    <input @bind="searchTerm" @oninput="OnSearchChanged" class="form-control" placeholder="@localizer["Search by name..."]" />
</div>

@if (filteredEmployees != null)
{
    <QuickGrid Class="table" Items="filteredEmployees.AsQueryable<Employee>()">
        <PropertyColumn Property="employee => employee.Id" />
        <PropertyColumn Property="employee => employee.FirstName" Sortable="true" />
        <PropertyColumn Property="employee => employee.LastName" Sortable="true" />
        <PropertyColumn Property="employee => employee.Department" />
        <PropertyColumn Property="employee => employee.HireDate" Sortable="true" />

        <TemplateColumn Context="employee">
            <a href="@($"employees/edit?id={employee.Id}")">Edit</a> |
            @* <a href="@($"employees/details?id={employee.Id}")">Details</a> | *@
            <a href="@($"employees/delete?id={employee.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
}

<h3>User Claims</h3>

@if (user != null)
{
    <ul>
        @foreach (var claim in user.Claims)
        {
            <li>@claim.Type: @claim.Value (@claim.Issuer)</li>
        }
    </ul>
}
else
{
    <p>Loading claims...</p>
}

@code {
    private List<Employee>? _employees;
    private List<Employee>? filteredEmployees;
    private string searchTerm = "";

    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        _employees = await employeeService.GetEmployees();
        filteredEmployees = _employees;


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user = authState.User;

    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEmployees = _employees;
        }
        else
        {
            filteredEmployees = _employees.Where(e =>
                e.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }


}
