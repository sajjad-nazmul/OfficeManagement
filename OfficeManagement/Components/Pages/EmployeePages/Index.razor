@rendermode InteractiveServer

@page "/employees"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using OfficeManagement.Data
@using OfficeManagement.Services

@using Microsoft.Extensions.Localization
@using OfficeManagement.Locales;

@inject IStringLocalizer<Resource> localizer
@inject IEmployeeService employeeService

@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize(Roles = "Admin, Moderator")]

@attribute [StreamRendering]

<PageTitle>@localizer["Employees"]</PageTitle>

<h1>@localizer["Employees"]</h1>

<p>
    <a href="employees/create">Create New</a>
</p>

<div class="mb-3">
    <input @bind="searchTerm" @oninput="OnSearchChanged" class="form-control" placeholder="@localizer["Search by name..."]" />
</div>

@if (filteredEmployees != null)
{
    <QuickGrid Class="table" Items="filteredEmployees.AsQueryable<Employee>()">
        <PropertyColumn Property="employee => employee.Id" Title="@localizer["Id"]" />
        <PropertyColumn Property="employee => employee.FirstName" Title="@localizer["First Name"]" Sortable="true" />
        <PropertyColumn Property="employee => employee.LastName" Title="@localizer["Last Name"]" Sortable="true" />
        <PropertyColumn Property="employee => employee.Department" Title="@localizer["Department"]" />
        <PropertyColumn Property="employee => employee.HireDate" Title="@localizer["Hire Date"]" Sortable="true" />

        <TemplateColumn Context="employee">
            <a href="@($"employees/edit?id={employee.Id}")">@localizer["Edit"]</a> |
            @* <a href="@($"employees/details?id={employee.Id}")">Details</a> | *@
            <a href="@($"employees/delete?id={employee.Id}")">@localizer["Delete"]</a>
        </TemplateColumn>
    </QuickGrid>
}
else
{
    <div class="d-flex justify-content-center align-items-center" style="height: 70vh;">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

@code {
    private List<Employee>? _employees;
    private List<Employee>? filteredEmployees;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        _employees = await employeeService.GetEmployees();
        filteredEmployees = _employees;
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEmployees = _employees;
        }
        else
        {
            filteredEmployees = _employees.Where(e =>
                e.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }


}
