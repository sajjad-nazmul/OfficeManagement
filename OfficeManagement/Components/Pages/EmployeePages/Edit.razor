@page "/employees/edit"
@using Microsoft.EntityFrameworkCore

@using OfficeManagement.Data
@using OfficeManagement.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject IEmployeeService employeeService
@inject NavigationManager NavigationManager


@attribute [Authorize(Roles = "Admin")]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Employee</h2>
<hr />
@if (Employee is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Employee" OnValidSubmit="UpdateEmployee" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Employee.Id" value="@Employee.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">FirstName:</label>
                    <InputText id="firstname" @bind-Value="Employee.FirstName" class="form-control" />
                    <ValidationMessage For="() => Employee.FirstName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">LastName:</label>
                    <InputText id="lastname" @bind-Value="Employee.LastName" class="form-control" />
                    <ValidationMessage For="() => Employee.LastName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="department" class="form-label">Department:</label>
                    <InputText id="department" @bind-Value="Employee.Department" class="form-control" />
                    <ValidationMessage For="() => Employee.Department" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="hiredate" class="form-label">HireDate:</label>
                    <InputDate id="hiredate" @bind-Value="Employee.HireDate" class="form-control" />
                    <ValidationMessage For="() => Employee.HireDate" class="text-danger" />
                </div>

                <InputText id="applicationUserId" @bind-Value="Employee.ApplicationUserId" class="form-control" />
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/employees">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Employee? Employee { get; set; }

    protected override void OnInitialized()
    {
        Employee ??= employeeService.GetEmployee(Id);

        if (Employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateEmployee()
    {

        try
        {
            await employeeService.SaveEmployee(Employee!);
            // await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!EmployeeExists(Employee!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/employees");
    }

    private bool EmployeeExists(int id)
    {
        return employeeService.GetEmployee(id) != null;
    }
}
